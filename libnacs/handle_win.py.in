#

import os
import os.path
import ctypes

from ctypes import wintypes

# Implementation copied from https://stackoverflow.com/a/7586821/904262
kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)
def check_bool(result, func, args):
    if not result:
        raise ctypes.WinError(ctypes.get_last_error())
    return args

kernel32.LoadLibraryExW.errcheck = check_bool
kernel32.LoadLibraryExW.restype = wintypes.HMODULE
kernel32.LoadLibraryExW.argtypes = (wintypes.LPCWSTR,
                                    wintypes.HANDLE,
                                    wintypes.DWORD)

LOAD_WITH_ALTERED_SEARCH_PATH = 0x00000008

class CDLLEx(ctypes.CDLL):
    def __init__(self, name, mode=0, handle=None,
                 use_errno=True, use_last_error=False):
        if handle is None:
            handle = kernel32.LoadLibraryExW(name, None, mode)
        super().__init__(name, mode, handle, use_errno, use_last_error)

def _get_libpath(name):
    return os.path.join(r"@INSTALL_WINDOWS_BINDIR@", name)

def _open_handle(name):
    return CDLLEx(_get_libpath(name), LOAD_WITH_ALTERED_SEARCH_PATH)

min_ver = @MIN_LIB_VERSION@

seq_prefix = r"@CMAKE_SHARED_LIBRARY_PREFIX@@NACS_SEQ@"
utils_prefix = r"@CMAKE_SHARED_LIBRARY_PREFIX@@NACS_UTILS@"

def _load_libraries():
    # Try looking for library without loading first.
    # This maximum avoid any partially loaded library contaminating the address space.
    for ver in range(min_ver, 100):
        seq = seq_prefix + '-' + str(ver) + '.dll'
        utils = utils_prefix + '-' + str(ver) + '.dll'
        if os.path.exists(_get_libpath(seq)) and os.path.exists(_get_libpath(utils)):
            try:
                return _open_handle(seq), _open_handle(utils)
            except:
                continue
    # Finally trying to load unversioned library
    return _open_handle(seq_prefix + '.dll'), _open_handle(utils_prefix + '.dll')

nacs_seq, nacs_utils = _load_libraries()
libc = ctypes.cdll.msvcrt
